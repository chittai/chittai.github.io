<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FUDA RYOHEI</title>
    <link>https://chittai.github.io/</link>
    <description>Recent content on FUDA RYOHEI</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 05 May 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://chittai.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Creating a New Theme</title>
      <link>https://chittai.github.io/posts/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://chittai.github.io/posts/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>https://chittai.github.io/posts/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://chittai.github.io/posts/migrate-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png  should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
    <item>
      <title>About FUDA RYOHEI</title>
      <link>https://chittai.github.io/about/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://chittai.github.io/about/</guid>
      <description>Biography  布田　遼平(ふだ　りょうへい) 1988.12.21 Infrastructure Engineer  野村総合研究所に所属。インフラエンジニアとして社内クラウド基盤を管理。大学ではマルチキャストの研究に従事。 現在VRに興味があり、OculusRift/Goを使用したコンテンツの開発を独自でしている。
SkilSet  Hypervisor     Hypervisor Knowldge Level     VMware ESXi ★★★★★   OracleVM ★★★★     Storage     Vender Knowldge Level     NetApp(ONTAP) ★★★★★   EMC ★★★     Network     Vender Knowldge Level     Cisco ★★★     Programming Language     ProgrammingLanguage Knowldge Level     C# ★★★   Go ★   Ruby ★★★     Framework     Framework Knowldge Level     Ruby on Rails ★★★   jQuery ★★★     Game Engine     GameEngine Knowldge Level     Unity ★★★     Cloud Platform     Platform Knowldge Level     GCP ★★   AWS ★   OCI ★★★     XR Platform     Platform Knowldge Level     Oculus Rift/Go ★★★     Version Control     Platform Knowldge Level     Git ★★★★   SVN ★★     Infrastructure Tool     Tool Knowldge Level     Ansible ★★   Terraform ★★   Jenkins ★★     RDBMS(DBA)     Tool Knowldge Level     Oracle ★★★★    Education  東京理科大学理工学研究科 情報科学専攻 March,2012  Certified  Oracle Master Silver  Resume 野村総合研究所　  2012/04 ~ 現在</description>
    </item>
    
    <item>
      <title>DERA</title>
      <link>https://chittai.github.io/portfolio/dera/</link>
      <pubDate>Thu, 21 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://chittai.github.io/portfolio/dera/</guid>
      <description>This is a Java reference implementation of dynamic event-driven actors runtime aiming at providing adequate abstraction levels and mechanisms for modelling and developing (distributed) event-based systems. DERA leverages the intrinsic loose coupling of event-driven communication styles to support various kinds of run-time evolution and adaptation (i.e., enabling run-time flexibility) while minimizing the non-deterministic nature of traditional event-based applications (i.e., supporting formal analysis).</description>
    </item>
    
    <item>
      <title>hyde-hyde</title>
      <link>https://chittai.github.io/portfolio/hyde-hyde/</link>
      <pubDate>Sat, 27 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://chittai.github.io/portfolio/hyde-hyde/</guid>
      <description>Hyde-hyde is a responsive Hugo theme inspired by @spf13&amp;rsquo;s Hyde and its variant Nate Finch&amp;rsquo;s blog. It was heavily restructured with modularised page layouts for easier maintenance and modification. Hyde-hyde offers awesome features such as nice colour tone, code highlighting, Font-Awesome 5&amp;rsquo;s sidebar icons), a cool portfolio page, more choices for commenting (e.g. GraphComment, Disqus).</description>
    </item>
    
    <item>
      <title>LaraMod</title>
      <link>https://chittai.github.io/portfolio/laramod/</link>
      <pubDate>Fri, 19 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://chittai.github.io/portfolio/laramod/</guid>
      <description>LaraMod is another modularisation effort to systematically organising a Laravel based project. The idea stems from my struggle to structure a Laravel-based project so that I can work effectively on individual modules whilst keeping Laravel codebase intact as much as possible and also keeping the project&amp;rsquo;s codebase separate from Laravel.</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://chittai.github.io/posts/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://chittai.github.io/posts/goisforlovers/</guid>
      <description>Hugo uses the excellent go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in go templates.
This document is a brief primer on using go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://chittai.github.io/posts/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://chittai.github.io/posts/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Goto hugo releases and download the appropriate version for your os and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at installing hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
  </channel>
</rss>